---
# tasks file for db
- name: Install packages
  apt:
    name:
      - mysql-server
      - mysql-client
      - python3-pymysql
    state: present
    update_cache: true
  tags: mysql

- name: Copy mysqld config file
  template:
    src: templates/mysqld.cnf.j2
    dest: /etc/mysql/mysql.conf.d/mysqld.cnf
    owner: root
    group: root
    mode: 0644
  notify: Restart mysql
  tags: mysql

- name: Copy mysqld config file2
  copy:
    src: files/mysqldump.cnf
    dest: /etc/mysql/mysql.conf.d/mysqlddump.cnf
    owner: root
    group: root
    mode: 0644
  notify: Restart mysql
  tags: mysql

- name: Restart mysql
  meta: flush_handlers
  tags: mysql

- name: Start mysql service
  systemd:
    name: mysql
    state: started
    enabled: true
  tags: mysql

- name: Update mysql root password for all root accounts
  mysql_user:
    name: root
    password: "{{ db_root_password }}"
    check_implicit_admin: true
    login_user: root
    login_password: "{{ db_root_password }}"
    login_unix_socket: /var/run/mysqld/mysqld.sock
  tags: mysql

#- name: Create database
#  mysql_db:
#    name: "{{ db_name }}"
#    state: present
#    login_user: root
#    login_password: "{{ db_root_password }}"
#  tags: mysql

#- name: Create db user
#  mysql_user:
#    name: "{{ db_user }}"
#    host: "%"
#    password: "{{ db_password }}"
#    login_user: root
#    login_password: "{{ db_root_password }}"
#    state: present
#    priv: "{{ db_name }}.*:ALL"
#  when: 'ansible_hostname == "db-master"'
#  tags: mysql

- name: Copy db dump to servers
  copy:
    src: files/db_new.sql
    dest: /home/vagrant/db.sql
  when: 'ansible_hostname == "db-master"'
  tags:
    - mysql
    - replication

- name: Check if database exists
  mysql_query:
    login_user: root
    login_password: "{{ db_root_password }}"
    query: "SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME = '{{ db_name }}';"
  register: db_check
  tags:
    - mysql
    - replication

- name: Loading mysql dump
  mysql_db:
    login_user: root
    login_password: "{{ db_root_password }}"
    name: all
    state: import
    target: /home/vagrant/db.sql
  when: db_check.rowcount[0] == 0 and ansible_hostname == "db-master"
#  when: (db_check.stdout | length == 0 or db_check.stdout is not defined) and ansible_hostname == "db-master"
#  when: db_check.stdout | length == 0 and ansible_hostname == "db-master"
  tags:
    - mysql
    - replication

#- name: 
#  shell: mysqldump --all-databases --add-drop-table --create-options --disable-keys \
#                   --extended-insert --single-transaction --quick --events --routines \
#                   --set-gtid-purged=OFF --triggers --skip-lock-tables --flush-privileges \
#                   -u root -p'P@$$w0rd' > /home/vagrant/db.sql

- name: Create dump on master
  mysql_db:
    login_user: root
    login_password: "{{ db_root_password }}"
    state: dump
    name: all
    target: /tmp/db.sql
  when: 'ansible_hostname == "db-master"'
  tags:
    - mysql
    - replication

- name: Fetch dump from master
  fetch:
    src: /tmp/db.sql
    dest: files/db_master.sql
    flat: true
  when: 'ansible_hostname == "db-master"'
  tags:
    - mysql
    - replication

- name: Copy dump to slave
  copy:
    src: files/db_master.sql
    dest: /home/vagrant/db.sql
  when: 'ansible_hostname == "db-slave"'
  tags:
    - mysql
    - replication

- name: Loading mysql dump on slave
  mysql_db:
    login_user: root
    login_password: "{{ db_root_password }}"
    name: all
    state: import
    target: /home/vagrant/db.sql
  when: 'ansible_hostname == "db-slave"'
  tags:
    - mysql
    - replication

- name: Create user for replication
  mysql_user:
    name: "{{ db_repl_user }}"
    host: '%'
    password: "{{ db_repl_password }}"
    login_user: root
    login_password: "{{ db_root_password }}"
    state: present
    priv: '*.*:REPLICATION SLAVE'
  when: 'ansible_hostname == "db-master"'
  tags:
    - mysql
    - replication

- name: Stop replication
  mysql_replication:
    mode: stopreplica
    login_user: root
    login_password: "{{ db_root_password }}"
  when: 'ansible_hostname == "db-slave"'
  tags:
    - mysql
    - replication

- name: Configure replication on slave
  mysql_replication:
    mode: changeprimary
    primary_host: "{{ db_master_srv }}"
    primary_port: 3306
    primary_user: "{{ db_repl_user }}"
    primary_password: "{{ db_repl_password }}"
    primary_auto_position: true
    login_user: root
    login_password: "{{ db_root_password }}"
  when: 'ansible_hostname == "db-slave"'
  tags:
    - mysql
    - replication

#- name: Loading mysql dump
#  mysql_db:
#    login_user: root
#    login_password: "{{ db_root_password }}"
#    name: all
#    state: import
#    target: /home/vagrant/db.sql
#  when: 'ansible_hostname == "db-slave"'
#  tags:
#    - mysql
#    - replication

- name: Start replication
  mysql_replication:
    mode: startreplica
    login_user: root
    login_password: "{{ db_root_password }}"
  when: 'ansible_hostname == "db-slave"'
  tags:
    - mysql
    - replication

- name: Configure mysql backup on slave
  import_tasks: mysql_backup.yml

- name: Configure node exporter
  import_tasks: node_exporter.yml

- name: Configure mysqld exporter
  import_tasks: mysqld_exporter.yml

- name: Configure filebeat
  import_tasks: filebeat.yml

- name: Configure iptables
  import_tasks: iptables.yml
